package javavirtualmachine;

public class Counter {
	public volatile static int count = 0;
	public static void inc(){
		 try {
	            Thread.sleep(1);
	        } catch (InterruptedException e) {
	        }

	        count++;
	    }
	public static void main(String[] args){
		for(int i=0;i<1000;i++){
			new Thread(new Runnable(){
				@Override
				public void run(){
					Counter.inc();
				}
			}).start();
		}
		System.out.println("Coumter.count="+Counter.count);
	}
	}
  /*
  count++; 这条语句由3条指令组成：    
  （1）将 count 的值从内存加载到 cpu 的某个寄存器r    
  （2）将 寄存器r 的值 +1，结果存放在 寄存器s   
  （3）将 寄存器s 中的值写回内存
  所以，如果有多个线程同时在执行 count++,在某个线程执行完第（3）步之前，其它线程是看不到它的执行结果的。
  在没有 volatile 的时候，执行完 count++;，执行结果其实是写到CPU缓存中，没有马上写回到内存中，后续在某些情况下（比如CPU缓存不够用）再将CPU缓存中的值flush到内存。正因为没有马上写到内存，所以不能保证其它线程可以及时见到执行的结果。在有 volatile 的时候，执行完 count++;，执行结果写到CPU缓存中，并且同时写回到内存，因为已经写回内存了，所以可以保证其它线程马上看到执行的结果。但是，volatile 并没有保证原子性，在某个线程执行（1）（2）（3）的时候，volatile 并没有锁定 count 的值，也就是并不能阻塞其他线程也执行（1）（2）（3）。可能有两个线程同时执行（1），所以（2）计算出来一样的结果，然后（3）存回的也是同一个值。
  **/

再加个链接：http://blog.csdn.net/mianshui1105/article/details/52263228
